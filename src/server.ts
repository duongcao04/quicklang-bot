import { envConfig } from '../config/envConfig'
import Logger from './helpers/logger'
import GoogleApiService from './lib/GoogleApiService'
import TelegramBotService from './lib/TelegramBotService'

class Main {
    constructor(
        private readonly googleApi = new GoogleApiService(
            envConfig.googleKeyFilePath
        ),
        private readonly bot = new TelegramBotService(envConfig.telegramToken),
        private readonly logger = new Logger()
    ) {}

    bootstrap() {
        this.logger.info('Server is running !')
        this.googleApi.initialize()
        this.botRegisterCommonCommand(this.bot)
        this.botLearningZoneCommand(this.bot)
    }

    private botRegisterCommonCommand(bot: TelegramBotService) {
        // ƒêƒÉng k√Ω l·ªánh m·ªõi
        bot.registerCommand({
            command: 'start',
            description: 'B·∫Øt ƒë·∫ßu bot',
            handler: (msg) => {
                bot.sendMessage(
                    msg.chat.id,
                    'Xin ch√†o! T√¥i l√† Quicklang Bot. G√µ /help ƒë·ªÉ xem danh s√°ch l·ªánh.'
                )
            },
        })

        bot.registerCommand({
            command: 'help',
            description: 'Hi·ªÉn th·ªã tr·ª£ gi√∫p',
            handler: (msg) => {
                let helpText = 'ü§ñ Danh s√°ch l·ªánh\n'
                helpText += '/start - B·∫Øt ƒë·∫ßu bot\n'
                helpText += '/about - V·ªÅ t√¥i\n'
                helpText += '/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n\n'
                helpText += 'üìö Khu v·ª±c h·ªçc t·∫≠p\n'
                helpText += '/sheetlink - Li√™n k·∫øt Google Sheet\n'
                helpText += '/addenglishword - Th√™m t·ª´ m·ªõi (ti·∫øng Anh)\n'
                bot.sendMessage(msg.chat.id, helpText)
            },
        })

        bot.registerCommand({
            command: 'about',
            description: 'V·ªÅ t√¥i',
            handler: (msg) => {
                let helpText = 'Xin ch√†o, t√¥i l√† D∆∞∆°ng üëã \n'
                helpText +=
                    'üëâ L·∫≠p tr√¨nh vi√™n v·ªõi kinh nghi·ªám chuy√™n v·ªÅ Website, ·ª®ng d·ª•ng di ƒë·ªông, . . . \n\n'
                helpText += 'Li√™n h·ªá:\n'
                helpText += 'üë®‚Äçüîß Webiste: https://yangis.dev\n'
                helpText += 'üßë‚Äçüíª Github: https://github.com/duongcao04\n'
                helpText += '‚úâÔ∏è Gmail: caohaiduong04@gmail.com\n'
                helpText += 'üìñ Facebook: https://facebook.com/duongcaodev\n'
                bot.sendMessage(msg.chat.id, helpText)
            },
        })

        return this.logger.info('[ CHUNG ] - ƒêƒÉng k√Ω l·ªánh th√†nh c√¥ng!')
    }

    private botLearningZoneCommand(bot: TelegramBotService) {
        bot.registerCommand({
            command: 'sheetlink',
            description: 'Li√™n k·∫øt Google Sheet',
            handler: async (msg) => {
                const sheet = (
                    await this.googleApi.getSheetMetadata(
                        envConfig.spreadsheetId
                    )
                ).sheets
                console.log(sheet)
                let helpText = 'Google Sheet Link: '
                helpText += `https://docs.google.com/spreadsheets/d/${envConfig.spreadsheetId}`
                bot.sendMessage(msg.chat.id, helpText)
            },
        })

        bot.registerCommand({
            command: 'addenglishword',
            description: 'Th√™m t·ª´ m·ªõi (ti·∫øng Anh)',
            handler: async (msg) => {
                const sheet = (
                    await this.googleApi.getSheetMetadata(
                        envConfig.spreadsheetId
                    )
                ).sheets
                console.log(sheet)
                let helpText = 'Get'
                bot.sendMessage(msg.chat.id, helpText)
            },
        })

        return this.logger.info('[ H·ªåC T·∫¨P ] - ƒêƒÉng k√Ω l·ªánh th√†nh c√¥ng!!')
    }
}

const app = new Main()
app.bootstrap()
